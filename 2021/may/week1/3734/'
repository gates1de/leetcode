package main
import (
	"fmt"
)

func minDistance(word1 string, word2 string) int {
	shortWord := word1
	longWord := word2
	if len(word2) < len(word1) {
		shortWord = word2
		longWord = word1
	}
	maxSameCount := int(0)
	maxSameIndex := int(-1)
	longWord = generateBlank(len(shortWord) - 1) + longWord + generateBlank(len(shortWord) - 1)
	fmt.Printf("shortWord = %v, longWord = %v\n", shortWord, longWord)
	// for i := 0; i < len(longWord); i++ {
	// 	lRunes := longWord[i:min(len(longWord), i + len(shortWord))]
	// 	sameCount := sameCounter([]rune(lRunes), []rune(shortWord))
	// 	if maxSameCount < sameCount {
	// 		maxSameCount = sameCount
	// 		maxSameIndex = i
	// 	}
	// 	fmt.Printf("lRunes = %v, shortWord = %v, sameCount = %v\n", string(lRunes), string([]rune(shortWord)), sameCount)
	// }
	if maxSameIndex < 0 {
		return len(longWord) * 2
	}
	removeCount := len(longWord[:maxSameIndex]) + len(longWord[min(len(longWord) - 1, maxSameIndex + len(shortWord)):])
	fmt.Printf("removeCount = %v\n", removeCount)
	return removeCount + (len(shortWord) - maxSameCount)
}

func generateBlank(num int) string {
	result := ""
	for i := 0; i < num; i++ {
		result += " "
	}
	return result
}

func sameCounter(r1Arr, r2Arr []rune) int {
	result := int(0)
	for i := 0; i < len(r1Arr); i++ {
		if i >= len(r2Arr) {
			break
		}
		r1 := r1Arr[i]
		r2 := r2Arr[i]
		if r1 == r2 {
			result++
		}
	}
	return result
}

func removeAtIndex(s []rune, i int) string {
	r := append(s[:i], s[i + 1:]...)
	return string(r)
}

func min(a, b int) int {
	if b < a {
		return b
	}
	return a
}

func main() {
	// result: 2
	word1 := "sea"
	word2 := "eat"

	// result: 4 
	// word1 := "leetcode"
	// word2 := "etco"

	// result: 4
	// word1 := "sea"
	// word2 := "ate"

	// result: 
	// word1 := ""
	// word2 := ""

	result := minDistance(word1, word2)
	fmt.Printf("result = %v\n", result)
}

