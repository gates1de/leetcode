package main
import (
	"fmt"
)

func shortestPath(grid [][]int, k int) int {
	result := int(10000)
	visited := map[[2]int]int{}
	for i, _ := range grid {
		for j, _ := range grid[i] {
			visited[[2]int{i, j}] = 10000
		}
	}
	helper(0, 0, 0, k, visited, grid, &result)
	if result == 10000 {
		return -1
	}
	return result
}

func helper(y int, x int, step int, k int, visited map[[2]int]int, grid [][]int, result *int) {
	// fmt.Printf("[%v, %v]\n", y, x)
	if visited[[2]int{y, x}] < step {
		return
	}
	if y == len(grid) - 1 && x == len(grid[0]) - 1 {
		// fmt.Printf("step = %v\n", step)
		if *result > step {
			*result = step
		}
		return
	}

	visited[[2]int{y, x}] = step
	// up
	if y - 1 >= 0 {
		if grid[y - 1][x] == 0 {
			helper(y - 1, x, step + 1, k, visited, grid, result)
		} else if grid[y - 1][x] == 1 && k > 0 {
			helper(y - 1, x, step + 1, k - 1, visited, grid, result)
		}
	}
	// right
	if x + 1 < len(grid[0]) {
		if grid[y][x + 1] == 0 {
			helper(y, x + 1, step + 1, k, visited, grid, result)
		} else if grid[y][x + 1] == 1 && k > 0 {
			helper(y, x + 1, step + 1, k - 1, visited, grid, result)
		}
	}
	// down
	if y + 1 < len(grid) {
		if grid[y + 1][x] == 0 {
			helper(y + 1, x, step + 1, k, visited, grid, result)
		} else if grid[y + 1][x] == 1 && k > 0 {
			helper(y + 1, x, step + 1, k - 1, visited, grid, result)
		}
	}
	// left
	if x - 1 >= 0 {
		if grid[y][x - 1] == 0 {
			helper(y, x - 1, step + 1, k, visited, grid, result)
		} else if grid[y][x - 1] == 1 && k > 0 {
			helper(y, x - 1, step + 1, k - 1, visited, grid, result)
		}
	}
}

func main() {
	// result: 6
	// grid := [][]int{
	// 	{0, 0, 0},
	// 	{1, 1, 0},
	// 	{0, 0, 0},
	// 	{0, 1, 1},
	// 	{0, 0, 0},
	// }
	// k := int(1)

	// result: -1
	// grid := [][]int{
	// 	{0, 1, 1},
	// 	{1, 1, 1},
	// 	{1, 0, 0},
	// }
	// k := int(1)

	// result: 0
	// grid := [][]int{{0}}
	// k := int(1)

	// result: 20
	// grid := [][]int{
	// 	{0,0,0,0,0,0,0,0,0,0},
	// 	{0,1,1,1,1,1,1,1,1,0},
	// 	{0,1,0,0,0,0,0,0,0,0},
	// 	{0,1,0,1,1,1,1,1,1,1},
	// 	{0,1,0,0,0,0,0,0,0,0},
	// 	{0,1,1,1,1,1,1,1,1,0},
	// 	{0,1,0,0,0,0,0,0,0,0},
	// 	{0,1,0,1,1,1,1,1,1,1},
	// 	{0,1,0,1,1,1,1,0,0,0},
	// 	{0,1,0,0,0,0,0,0,1,0},
	// 	{0,1,1,1,1,1,1,0,1,0},
	// 	{0,0,0,0,0,0,0,0,1,0},
	// }
	// k := int(1)

	// result: 
	grid := [][]int{
		{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
		{1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0},
		{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
		{0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1},
		{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
		{1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0},
		{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
		{0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1},
		{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
		{1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0},
		{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
		{0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1},
		{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
		{1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0},
		{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
		{0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1},
		{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
		{1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0},
		{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
		{0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1},
		{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
		{1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0},
		{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
		{0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1},
		{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
		{1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0},
		{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
		{0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1},
		{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
		{1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0},
		{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
		{0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1},
		{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
		{1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0},
		{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
		{0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1},
		{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
	}
	k := int(5)

	// result: 
	// grid := [][]int{}
	// k := int(0)

	result := shortestPath(grid, k)
	fmt.Printf("result = %v\n", result)
}

