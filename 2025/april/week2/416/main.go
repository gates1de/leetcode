package main
import (
	"fmt"
)

func canPartition(nums []int) bool {
	n := len(nums)
	sum := int(0)
	for _, num := range nums {
		sum += num
	}

	if (sum & 1) == 1 {
		return false
	}
	sum /= 2

	dp := make([][]bool, n + 1)
	for i, _ := range dp {
		dp[i] = make([]bool, sum + 1)
	}
	dp[0][0] = true

	for i := 1; i < n + 1; i++ {
		dp[i][0] = true
	}
	for j := 1; j < sum + 1; j++ {
		dp[0][j] = false
	}
	for i := 1; i < n + 1; i++ {
		for j := 1; j < sum + 1; j++ {
			dp[i][j] = dp[i - 1][j]

			if j >= nums[i - 1] {
				dp[i][j] = dp[i][j] || dp[i - 1][j - nums[i - 1]]
			}
		}
	}

	return dp[n][sum]
}

func main() {
	// result: true
	// nums := []int{1, 5, 11, 5}

	// result: false
	// nums := []int{1, 2, 3, 5}

	// result: false
	// nums := []int{1}

	// result: true
	// nums := []int{11, 1, 7, 4, 5, 6, 12}

	// result: false
	nums := []int{}

	// result: 
	// nums := []int{}

	result := canPartition(nums)
	fmt.Printf("result = %v\n", result)
}
