package main
import (
	"fmt"
)

func fourSumCount(nums1 []int, nums2 []int, nums3 []int, nums4 []int) int {
    m := make(map[int]int, len(nums1) * len(nums2) * 3 / 4)

    for _, n1 := range nums1 {
        for _, n2 := range nums2 {
            m[n1 + n2]++
        }
    }

	result := int(0)
    for _, n3 := range nums3 {
        for _, n4 := range nums4 {
            result += m[0 -n3 - n4]
        }
    }

    return result
}

// Slow & Use more memory
func mySolution(nums1 []int, nums2 []int, nums3 []int, nums4 []int) int {
	counter1 := map[int]int{}
	counter2 := map[int]int{}
	counter3 := map[int]int{}
	counter4 := map[int]int{}
	for i, n1 := range nums1 {
		n2 := nums2[i]
		n3 := nums3[i]
		n4 := nums4[i]
		counter1[n1]++
		counter2[n2]++
		counter3[n3]++
		counter4[n4]++
	}

	result := int(0)
	for n1, count1 := range counter1 {
		for n2, count2 := range counter2 {
			for n3, count3 := range counter3 {
				if count4, ok := counter4[-(n1 + n2 + n3)]; ok {
					result += count1 * count2 * count3 * count4
				}
			}
		}
	}

	return result
}

func main() {
	// result: 2
	// nums1 := []int{1, 2}
	// nums2 := []int{-2, -1}
	// nums3 := []int{-1, 2}
	// nums4 := []int{0, 2}

	// result: 1
	// nums1 := []int{0}
	// nums2 := []int{0}
	// nums3 := []int{0}
	// nums4 := []int{0}

	// result: 46
	// nums1 := []int{3,2,9,8,7,1}
	// nums2 := []int{0,-2,-9,3,1,6}
	// nums3 := []int{-4,-8,6,0,7,6}
	// nums4 := []int{-2,-3,1,8,-7,0}

	// result: 3323706
	nums1 := []int{77,92,45,99,-40,79,-74,99,-90,-10,67,-59,-4,-77,-4,66,90,7,-55,-88,-30,-7,70,46,-95,-48,-79,1,62,24,74,-90,99,21,27,-78,-74,39,52,-4,87,95,85,87,99,14,38,-93,-38,58,-30,-28,79,-54,1,75,34,71,69,-57,74,44,-42,-30,-70,-7,5,-44,-56,91,-55,-3,-99,-47,94,43,-51,41,61,-30,-90,-70,88,-28,-23,82,-83,97,-85,67,-2,88,-5,95,25,-99,68,65,-17,-87,51,53,-95,82,25,-67,-7,-44,-59,28,90,95,-24,-32,-73,-78,-73,14,78,61,-84,11,17,-52,53,-52,-43,9,-32,-98,71,-66,57,63,35,-54,-78,64,39,-32,-23,80,-34,-12,81,44,-16,-94,-49,48,-69,-14,-73,55,68,-45,76,40,-96,82,7,63,17,45,-21,-35,-27,-33,-93,9,95,10,97,-46,-1,89,74,9,53}
	nums2 := []int{-42,26,-99,-40,-24,0,-99,-80,-1,-3,27,-83,-70,-70,-44,-79,94,-42,15,56,59,-47,100,-51,73,47,-83,-72,-94,54,5,-8,-92,-11,97,-17,8,6,-32,5,-17,-35,1,1,-77,62,51,-7,9,83,13,57,63,50,-9,-7,88,63,71,4,-15,-49,36,-17,-4,-23,69,-62,-10,-15,-80,-24,32,72,57,-59,-62,-80,76,-93,-56,-36,-39,-44,-95,-16,1,-33,-27,-4,-47,-68,10,72,29,-87,86,11,5,-18,-11,-31,64,-98,87,-93,-78,50,-49,76,-77,26,-50,-15,37,11,-89,-50,21,78,-22,-98,82,-37,-68,-31,-1,-55,35,18,-40,3,26,-68,78,21,-52,-77,-60,-55,64,-96,-40,-31,-61,-61,65,-50,-37,-52,84,-81,-76,-64,100,81,76,66,85,-59,73,-75,-63,8,62,76,28,-94,-1,-57,-83,-74,-63,-12,80,-45,37,-40,-86}
	nums3 := []int{-95,81,23,-20,-71,-60,-92,-74,82,12,37,-94,42,-87,20,75,-80,32,-16,-80,93,-43,22,96,-89,87,-86,-98,54,-14,39,-70,-48,35,-92,-14,-22,63,27,-1,21,-92,-89,4,74,-24,-68,42,83,71,-46,-84,-32,-91,-78,-64,-66,56,-88,36,-31,97,-65,35,-40,-88,-12,-66,-8,15,-24,6,36,75,-54,-18,47,-64,-39,88,-32,-23,-93,-81,59,-44,19,-67,49,-76,-3,12,64,-72,99,-16,18,-54,28,32,-74,9,79,-45,-49,-5,27,-41,23,-89,78,24,-95,54,-41,37,-47,-39,-18,-16,55,-14,-2,98,-8,85,-43,5,-66,6,-32,56,-49,99,-46,-28,99,98,64,38,22,-35,-5,-24,-64,44,25,91,63,-33,59,-16,-80,1,-1,27,96,-20,97,-60,69,92,-100,77,-65,-68,-5,53,51,-96,75,73,-11,-73,-20,-50,96,-18,68}
	nums4 := []int{-90,99,-78,-21,9,-38,-30,-68,65,58,-54,35,74,-27,6,20,-55,85,44,23,-76,35,-40,-30,-6,-61,72,-32,-78,-50,82,-35,54,-59,39,-71,16,59,-94,42,-74,94,19,48,57,77,-87,83,-83,-62,25,23,-77,21,-62,44,46,9,41,-85,82,-23,54,-35,8,-47,-1,95,-24,-93,-80,48,-43,-23,53,83,91,-38,83,16,-84,43,-33,-99,71,16,52,-87,43,99,69,-26,-57,-90,-54,14,99,-19,-28,-84,83,86,-93,-94,-75,29,6,99,26,-58,17,-59,-14,37,-23,96,93,89,61,38,99,-66,26,77,88,-5,86,-1,-83,86,-6,87,-85,27,-17,-28,-68,-57,-28,-80,-62,48,12,-33,-52,-75,-78,11,-76,-17,-10,-71,56,39,-24,37,23,-9,-92,86,57,-24,55,-1,74,28,72,48,0,-53,-14,-43,80,91,-54,-71,81,45,20}

	// result: 
	// nums1 := []int{}
	// nums2 := []int{}
	// nums3 := []int{}
	// nums4 := []int{}

	result := fourSumCount(nums1, nums2, nums3, nums4)
	fmt.Printf("result = %v\n", result)
}

